#+TITLE:     Operating Systems --- Lab Instruction
#+AUTHOR:    WANG Xiaolin
#+EMAIL:     wx672ster+os@gmail.com
#+DESCRIPTION: Lab projects for the OS course
#+KEYWORDS: os, operating system, linux, kernel, system call, process, memory, file, gcc, lab, project
#+LANGUAGE:  en
#+OPTIONS:   H:4 num:t toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:
#+LINK_HOME:
# (setq org-export-html-use-infojs nil)
# (setq org-export-html-style nil)

* References - noexport                        :noexport:
  - [[http://www.ibm.com/developerworks/linux/library/l-system-calls/][Kernel command using Linux system calls]]
  - [[http://www.ibm.com/developerworks/linux/library/l-proc.html][Access the Linux kernel using the /proc filesystem]]
  - [[http://beej.us/guide/bgipc/output/html/singlepage/bgipc.html][/Beej's Guide to Unix IPC/]], v1.1.2, Brian "Beej Jorgensen" Hall, 2010
  - [[http://cs2.swfu.edu.cn/pub/resources/Books/Linux/WILEY-Beginning_Linux_Programming_Third_Edition.pdf][Beginning Linux Programming]], 3e, N.Matthew, R.Stones, Wiley, 2004

* Caution
  1. To complete the lab work, you have to be happy with 2 foreign languages, =English= and =C=.
  2. Time is short. In the lab, you have no time for both understanding the instruction
     manuals and doing the programing work. So you have to read and understand the lab
     instructions *before* you come to the lab.
  3. Your work (report + source code) must be handed in *within a week after the lab work*.
  4. To start your work, make a directory first, e.g. 20121156001. And then you should do
     everything within this directory. Finally, after you've done, make this directory a
     [[http://www.gnu.org/software/tar/manual/html_chapter/Formats.html#SEC131][=tar-ball=]] and submit it to [[mailto:wx672ster%2Bos@gmail.com][{{{email}}}]]. Besides this tar ball, in your email message
     you *must* tell me:
     1) How many hours you spent in this work?
     2) Your major work in this report;
     3) The major problems you met, and how did you solve (or try solving) them;
     4) Reference books and web links;
  5. These are Linux projects. Your work *must* be done in Linux.
     - You are *required* to finish your report with [[http://orgmode.org/][=Emacs org-mode=]]
       - To enforce the above requirement, you have to submit both an =org file= and a generated
         =html file= as your lab report.
       - A sample [[file:sample-report][report template]] written with Emacs org-mode is provided for your
         reference.
       - You can get some Chinese help about emacs at [[http://emacser.com/][Emacs中文网]].
       - Org-mode Tutorials
     - [[http://orgmode.org/worg/org-tutorials/orgtutorial_dto.php][David O'Toole Org tutorial]]
     - [[http://jaderholm.com/screencasts.html][Org-mode screencast]] ([[http://cs3.swfu.edu.cn/~wx672/org-mode.swf][local copy]])
     - [[http://orgmode.org/worg/org-tutorials/index.php][More org-mode tutorials]]
     - =info org=
       - If you need to draw a picture (e.g. flow chart, etc.), you can use [[http://live.gnome.org/Dia][Dia]], [[http://www.xfig.org/][xfig]], or preferably
         embed an [[http://en.wikipedia.org/wiki/ASCII_art][ascii art]] in your org file.
       - If you need to insert source codes into your org file, you should check:
     - http://orgmode.org/manual/Include-files.html#Include-files, and you can find some
           examples in [[#code-insertion][this section]].
     - MS-word file will *NOT* be accepted!
  6. Late reports will be penalized 20% per day.
  7. Cheating will result in automatic failure of this course.

* Approaching to the Linux kernel
** proc file-system
   - *Reference*
     - [[https://developer.ibm.com/technologies/linux/articles/l-proc/][Access the Linux kernel using the /proc filesystem]] (last visited: [2020-11-20 Fri])
     - =man proc=
     - =ttyplay= [[https://cs6.swfu.edu.cn/~wx672/lecture_notes/os/ttyrec/2.1-ttyrec][=2.1-ttyrec=]] (last visited: [2020-11-20 Fri])
     - =ttyplay= [[https://cs6.swfu.edu.cn/~wx672/lecture_notes/os/ttyrec/submit.ttyrec][=submit.ttyrec=]] (last visited: [2020-11-20 Fri])
   - *Questions*
     1. What's the CPU type and model? (=/proc/cpuinfo=)
     2. What version of the Linux kernel are you using? (=uname=)
     3. How long has it been since your PC last booted? (=uptime=)
     4. How much of the total CPU time has been spent executing in user mode? kernel mode? idle? (=top=)
     5. How much memory is configured in your PC? (=top,free,/proc/meminfo=)
     6. How much memory is currently available? (=top,free,/proc/meminfo=)
     7. How many disk read/write requests have been made? (=/proc/diskstats=)
     8. How many context switches has the kernel performed? (=/proc/stat=)
     9. How many context switches has a process had? (=/proc/[pid]/status=)
     10. How many processes have been created since the system was booted? (=/proc/stat=)
     11. How many processes are there in the ready queue? (=/proc/stat=)
     12. How many processes are blocked waiting for I/O to complete? (=/proc/stat=)
     13. What does the following command do?
     : cd /proc/`ps | head -2 | tail -1 | cut -f1 -d' '` && ls -l
   - *Sum up:* In your email message, please answer the following questions.
     1. How many hours you spent in this section?
     2. What's the major difficulties you met in this section? And,
     3. How did you solve (or try solving) them?
     4. Have you learnt anything? Or your time was just wasted?
** Play with the kernel
   - *Help for beginners*
     - /Debian Linux Kernel Handbook/, 2012. (Chapter 4, [[https://kernel-team.pages.debian.net/kernel-handbook/ch-common-tasks.html][/Common kernel-related tasks/]])  (last visited: [2020-11-20 Fri])
       : sudo apt install debian-kernel-handbook
     - Kroah-Hartman, Greg. [[http://www.kroah.com/lkn/][/Linux Kernel in a Nutshell: A Desktop Quick Reference/]],
       O'Reilly, 2007.  (last visited: [2020-11-20 Fri])
       - [[https://cs6.swfu.edu.cn/calibre/get/PDF/46/calibre][cs6 calibre]]
     - R. Love. [[https://cs6.swfu.edu.cn/calibre/get/PDF/12/calibre][/Linux Kernel Development/]]. Developer’s
       Library. Addison-Wesley, 2010. (Chapter 2, /Getting start with the kernel/)  (last visited: [2020-11-20 Fri])
     - [[http://www.win.tue.nl/~aeb/linux/lk/lk.html#toc2][/The Linux kernel/]], Andries Brouwer, 2003. (Chapter 2, [[http://www.win.tue.nl/~aeb/linux/lk/lk-2.html][/The Kernel Source/]])  (last visited: [2020-11-20 Fri])
   - *How to get around in the source code tree?* The kernel source is in
        =/usr/src/= directory if you installed it with =sudo apt install linux-source=. There are several ways to browse this huge repository:
     1. [[https://elixir.bootlin.com/linux/latest/source][https://elixir.bootlin.com]] (last visited: [2020-11-20 Fri])
     2. global (=man global=)
     3. cscope (=man cscope=)
     4. ctags (=man ctags=)
     5. =find + grep + less=
   - *Your Task:* (The objective of this task is to get an idea about where and how to view
     the Linux source code. You are *NOT* required to understand the code at this moment.)
     1. Find the following "famous" code, and tell me why they are "famous".
        - =start_kernel();=
        - =init();=
        - =struct task_struct;=
        - =struct inode;=
        - =struct file;=
        - =fork();=
        - =include/asm-generic/unistd.h=
        - =arch/x86_64/entry.S=
        - =kernel/printk.c=
     2. Finish lesson 2-6 of [[https://courses.linuxchix.org/kernel-hacking-2002.html][LinuxChix Kernel Hacking Lessons]] (last visited: [2020-11-20 Fri]). And you are
        encouraged to go through lesson 7-9, though it's not mandatory.
   - *Sum up:* In your email message, please answer the following questions.
     1. How many hours you spent in this section?
     2. What's the major difficulties you met in this section? And,
     3. How did you solve (or try solving) them?
     4. Have you learnt anything? Or your time was just wasted?

** Hello, kernel module!
   - *Reference* 
     - [[https://www.geeksforgeeks.org/linux-kernel-module-programming-hello-world-program/][Linux Kernel Module Programming: Hello World Program]] (last
       visited: [2022-09-20 Tue])
     - [[http://tldp.org/LDP/lkmpg/2.6/html/lkmpg.html#AEN119][The Linux Kernel Module Programming Guide]], 2007.  (last visited: [2020-11-20 Fri])
     - [[https://developer.ibm.com/technologies/linux/articles/l-proc/][Access the Linux kernel using the /proc filesystem]], 2006.  (last visited: [2020-11-20 Fri])
     - [[https://cs6.swfu.edu.cn/~wx672/lecture_notes/linux/c/c_dev.html#sec-6][A =Makefile= tutorial]], 2013. (last visited: [2020-11-20 Fri])
   - *Quick start*
     1) Find out the right kernel headers package matching your
        running kernel:

        #+begin_src sh
          uname -a
          aptitude search ^linux-headers
        #+end_src

        install the right headers-package matching your running
        kernel:
        
        #+begin_src sh
          sudo aptitude install linux-headers-`uname -r`
        #+end_src
        
     2) Make a directory to store your =Hello, world!= kernel module
        
        #+begin_src sh
          mkdir hello-lkm && cd hello-lkm
        #+end_src
        
     3) In =hello-lkm= directory, write a [[file:src/hello-lkm/hello-1.c][hello-1.c]]. (See [[https://www.geeksforgeeks.org/linux-kernel-module-programming-hello-world-program/][Linux Kernel Module Programming: Hello World Program]])
     4) Write a [[file:src/hello-lkm/Makefile][Makefile]]
     5) make

        #+begin_src sh
          make
        #+end_src
        
        If everything is ok, there should be a =hello-1.ko= file in your
        =hello-lkm= directory.
     6) You can view details of the =hello-1.ko= with =modinfo=

        #+begin_src sh
          modinfo hello-1.ko
        #+end_src
        
     7) Install the module into the running kernel
        
        #+begin_src sh
          sudo insmod ./hello-1.ko
        #+end_src

     8) See if it's loaded into the kernel
        
        #+begin_src sh
          lsmod | grep hello
        #+end_src
        
        Does it show up? Well, and you can see "Hello world" in the
        system log:
        
        #+begin_src sh
          sudo dmesg | tail
        #+end_src
        
     9) Now, you can remove this useless module from the kernel by
        doing:
        
        #+begin_src sh
          sudo rmmod hello_1
        #+end_src
        
     10) And you should see "Goodbye, Mr." here:
        
         #+begin_src sh
           dmesg | tail
         #+end_src
        
*** Questions
    1. What's a kernel module?
    2. How do modules get into the kernel?
    3. How do you know a kernel module is loaded?
    4. How do you know a module is working properly or not?
    5. How do you unload a module?
    6. in =hello-1.c=, what does =__init, __exit= mean? (=include/linux/init.h=)
    7. why =printk()=? why not =printf()=?
*** Sum up
    In your email message, please answer the following questions.
     1. How many hours you spent in this section?
     2. What's the major problems you met in this section? And,
     3. How did you solve (or try solving) them?
     4. Have you learnt anything? Or your time was just wasted?
** System calls
   - *Reference*
     - Google /linux system call tutorial/.
   - *Your task:* Follow whatever tutorial you found to write your own a system call. 
   - *Sum up:* In your email message, please answer the following questions.
     1. How many hours you spent in this section?
     2. What's the major problems you met in this section? And,
     3. How did you solve (or try solving) them?
     4. Have you learnt anything? Or your time was just wasted?
* Process Management
  - *Reference*
    - [[http://www.yolinux.com/TUTORIALS/ForkExecProcesses.html][Fork, Exec and Process control]] (last visited: [2020-11-20 Fri])
    - [[http://www.yolinux.com/TUTORIALS/LinuxTutorialPosixThreads.html][POSIX thread (pthread) libraries]] (last visited: [2020-11-20 Fri])
  - *Command line* 
    Get a sense of the following commands:
    1. =ps=
       : ps -af
       : ps -ax
       : ps -eLf
    2. =pstree=
    3. =nice/renice=
    4. =top=
       : man top
       Process Status:
       - =D=: uninterruptible sleep
       - =R=: running
       - =S=: sleeping
       - =T=: traced or stopped
       - =Z=: zombie
** Process creation
   :PROPERTIES:
   :CUSTOM_ID: code-insertion
   :END:
   - *Reference* 
     - =man fork=
     - =man exec=
     - =man wait=
     - =man exit=
     - =man 2 kill=
   - *Your tasks*
     1. There is an example c program at the end of the =wait= manual page (=man
        wait=). Read it, compile it, and run it. Then answer the following questions:
        1. Both =exit()= and =_exit()= are used in the program. What's the difference?
        2. Tell me about the following line of code:
           : w = waitpid(cpid, &status, WUNTRACED | WCONTINUED);
     2. =system()=, =fork()=, =exec()=
 
        Compile and run the following 4 programs. Tell me what they do? And [[http://stackoverflow.com/questions/1697440/difference-between-system-and-exec-in-linux][their differences]] (last visited: [2020-11-20 Fri])?
        #+BEGIN_SRC c
        #include <stdlib.h>
        #include <stdio.h>
        int main()
        {
            printf("Running ps with system\n");
            system("ps -ax &");
            printf("Done.\n");
            exit(0);
        }
        #+END_SRC
        #+BEGIN_SRC c
        #include <unistd.h>
        #include <stdio.h>
        int main()
        {
            printf("Running ps with execlp\n");
            execlp("ps", "ps", "-ax", 0);
            printf("Done.\n");
            exit(0);
        }
        #+END_SRC
        #+BEGIN_SRC c
        #include <stdio.h>
        #include <unistd.h>
        int main(){
        
           pid_t child_p;
           printf("Running ps with fork\n");
        
           child_p = fork();
        
           execlp("ps", "ps", "-ax", 0);
           return 0;
        }
        #+END_SRC
        #+BEGIN_SRC c
        #include <unistd.h>
        #include <stdio.h>
        int main()
        {
            pid_t pid;
            printf("Running ps again with fork\n");
            pid = fork();
            if ( pid == 0 ) { // in the child, do exec
            execlp("ps", "ps", "-ax", 0);
            }
            else if (pid < 0) // failed to fork
            {
                printf("fork failed.\n");
                exit(1);
            }
            else // parent
            {
            wait(NULL);
            }
            exit(0);
        }
        #+END_SRC
     3. more on =fork()= and =wait()= 

        Compile and run [[./src/proc/fork-blp.c][this program]]. Tell me why the output is weird (mixed with
        the =$= prompt)? And fix it with the =wait()= system call.
     4. zombies and =waitpid()=
        - Read the *NOTES* section in the =wait= manual page (=man 2 wait=) to get a clear
          idea about zombie processes. And tell me why zombie is not welcomed.
        - At the end of =wait= manual page (=man 2 wait=), there is an example
          program. Play with it, and tell me about =WUNTRACED=, =WCONTINUED=, =WIFEXITED=,
          =WEXITSTATUS=, =WIFSIGNALED=, =WTERMSIG=, =WIFSTOPPED=, =WSTOPSIG=,
          =WIFCONTINUED=, =pause()=.
        - Compile and run [[./src/proc/zombie.c][this small program]]. This program can leave a [[http://en.wikipedia.org/wiki/Zombie_process][zombie process]]
          in the system. You can see it with
          : ps u
      - *Your task:*
        - Write a similar program that leaves 5 zombies.
        - Tell me what's the difference between a [[http://en.wikipedia.org/wiki/Zombie_process][zombie process]] and a [[http://en.wikipedia.org/wiki/Orphan_process][orphan process]]?
        - Read [[https://cs6.swfu.edu.cn/calibre/get/PDF/39/calibre][Beginning Linux Programming]] (last visited: [2020-11-20 Fri]), Chapter 11, page 503 to learn how to avoid
              zombies with =waitpid()= system call. And correct the above program.
        - Tell me the difference between =exit()= and =return=.
   - *Sum up:*  In your email message, please answer the following questions.
     1. How many hours you spent in this section?
     2. What's the major problems you met in this section? And,
     3. How did you solve (or try solving) them?
     4. Have you learnt anything? Or your time was just wasted?
** Thread
   - *Reference* 
     - =man 3 pthread_create=
     - =man 3 pthread_attr_init=
   - *Tasks*
     1. At the end of =pthread_create= manual page (=man 3 pthread_create=), there is an example
        program. Play with it, and then tell me:
        1. What's the =tinfo[]=?
        2. What's the =res=?
     2. At the end of =pthread_attr_init= manual page (=man 3 pthread_attr_init=), there is an
        example program. Compile and run it.
     3. Compile and run [[./src/proc/thread2.c][this program]]. Now, remove the =pthread_join= call, i.e. comment
        out line 29-32. Compile and run it again for multiple times. Tell me the
        difference, and why?
   - *Sum up:* In your email message, please answer the following questions.
     1. How many hours you spent in this section?
     2. What's the major difficulties you met in this section? And,
     3. How did you solve (or try solving) them?
     4. Have you learnt anything? Or your time was just wasted?

** IPC
   - *Reference:* 
     [[http://beej.us/guide/bgipc/][/Beej's Guide to Unix IPC/]] (last visited: [2020-11-20 Fri])
*** Signals
    - *Reference*
      - /Beej's Guide to Unix IPC/, [[http://beej.us/guide/bgipc/html/multi/signals.html][section 3]]
      - [[file:/usr/src/linux/include/asm-generic/signal.h][signal.h]]
      - [[http://bytes.com/topic/c/answers/220198-how-understand-function-prototype-signal][How to understand function prototype signal()]] (last visited: [2020-11-20 Fri])
      - [[http://www.newty.de/fpt/intro.html][The Function Pointer Tutorials]] (last visited: [2020-11-20 Fri])
      - [[http://en.wikipedia.org/wiki/Typedef][typedef]] (last visited: [2020-11-20 Fri])
      - =man 2 signal=, =man 7 signal=
      - =man sigaction=
      - =kill, killall=
    - *Tasks*
      1. understanding =signal()=
     
         If you can understand
         
         #+begin_src c
         typedef int MYINT;
         MYINT myfunction(MYINT);
         #+end_src
         
         Then, you should be able to understand

         #+begin_src c
         typedef void (*sighandler_t)(int);
         sighandler_t signal(int signum, sighandler_t handler);
         #+end_src
         
         Now, tell me your understanding about the following [[http://en.wikipedia.org/wiki/Function_prototype][function prototype]]:
         
         #+begin_example
         void (*signal(int sig, void (*func)(int)))(int);
                      `-------------------v------------'
                                           `----> *signal() is a function returning a 'function pointer'
                                            `               pointing to a function of type void(*)(int)
                                             `--> *signal() takes 2 arguments:
                                                    .  sig - an int
                                                    . func - a 'function pointer' void(*)(int)
         #+end_example

         Put it in another way:

         #+begin_example
         void (*signal(int sig, void (*func)(int)))(int);
         void (                 *                 )(int);
         `--------------------v------------------------'
                               `---> void(*)(int) is a function pointer which is:
                                     - returned by function '*signal()'
                                     - pointing to a function taking an int, returning void
         #+end_example

         - =man 2 signal= can help

      2. Following /Beej's Guide to Unix IPC/, [[http://beej.us/guide/bgipc/html/multi/signals.html][section 3]] to play with signals. And then
         tell me details about the following code
         : int sigaction(int signum, const struct sigaction *act, struct sigaction *oldact);
         - =man 2 sigaction= can help

*** Pipe
    - *Reference*
      - /Beej's Guide to Unix IPC/, [[http://beej.us/guide/bgipc/html/multi/pipes.html][section 4]]
      - =man pipe=
      - =man 2 write=
      - =man 2 read=
    - *Tasks*
      1. Follow /Beej's Guide to Unix IPC/, [[http://beej.us/guide/bgipc/html/multi/pipes.html][section 4]] step by step to learn how to use =pipe=.
      2. Modify [[http://beej.us/guide/bgipc/examples/pipe3.c][pipe3.c]] in /Beej's Guide to Unix IPC/, [[http://beej.us/guide/bgipc/html/multi/pipes.html][section 4]] to make the child does the =wc -l=, and the parent does the =ls=.
      3. At the end of =pipe= manual page (=man 2 pipe=), there is an example program. Compile it, run it, understand it, and then, modify the program, let parent do read, and child do write.
*** FIFO
    - *Reference*
      - /Beej's Guide to Unix IPC/, [[http://beej.us/guide/bgipc/html/multi/fifos.html][section 5]]
      - =man fifo=
      - =man mkfifo=
      - =man 3 mkfifo=
      - =man mknod=
      - =man 2 mknod=
    - *Tasks*
      1. Follow /Beej's Guide to Unix IPC/, [[http://beej.us/guide/bgipc/output/html/singlepage/bgipc.html#fifos][section 5]] step by step to learn how to use FIFOs.
      2. When you run the example programs (=speak= and =tick=), there should be a new file named =american_maid= appear in your working directory (=$PWD=). What will happen if you delete this FIFO file while the two programs running? Why?
      3. Modify the example programs to use =mkfifo= instead of =mknod=.
      4. Extend the example programs, and make it have 3 writers.
*** File Locking
    - *Reference*
      - /Beej's Guide to Unix IPC/, [[http://beej.us/guide/bgipc/html/multi/flocking.html][section 6]]
      - =man flock=
      - =man 2 flock=
      - =man fcntl=
      - =include/asm-generic/fcntl.h=
    - *Tasks*
      1. Follow /Beej's Guide to Unix IPC/, [[http://beej.us/guide/bgipc/html/multi/flocking.html][section 6]] step by step to learn how to use File locks.
      2. Try the example =lockdemo.c= with both =F_RDLCK= and =F_WRLCK=.
      3. Tell me whether the locked file, e.g. =lockdemo.c= can be delete while the programs are running? And why?

*** Message Queues
    - *Reference*
      - /Beej's Guide to Unix IPC/, [[http://beej.us/guide/bgipc/html/multi/mq.html][section 7]]
      - =man ipcs=
      - =man ipcrm=
      - =man ipcmk=
      - =man msgget=
      - =man ftok=
      - =man msgsnd=, =man msgrcv=
      - =man msgctl=
      - =man offsetof=
      - =include/linux/msg.h=
    - *Tasks*
      1. Follow /Beej's Guide to Unix IPC/, [[http://beej.us/guide/bgipc/html/multi/mq.html][section 7]] step by step to learn how to use message queues.
      2. What happens when you're running both in separate windows and you kill one or the other?
      3. Also try running two copies of =kirk= or two copies of =spock= to get an idea of what
         happens when you have two readers or two writers.
      4. Another interesting demonstration is to run kirk, enter a bunch of messages, then run spock
         and see it retrieve all the messages in one swoop. Just messing around with these toy
         programs will help you gain an understanding of what is really going on.
      5. What happens if you =ipcrm= the queue while it's in use? Why?
      6. Create a message queue with =ipcmk=, and use it in your programs.
*** Semaphores
    - *Reference*
      - /Beej's Guide to Unix IPC/, [[http://beej.us/guide/bgipc/html/multi/semaphores.html][section 8]]
      - =include/linux/sem.h=
      - =man semget=
      - =man semop=
      - =man semctl=
    - *Tasks*
      1. Follow /Beej's Guide to Unix IPC/, [[http://beej.us/guide/bgipc/html/multi/semaphores.html][section 8]] step by step to learn how to use semaphores.
      2. Semaphores are used to lock some shared resources to enforce mutual-exclusion. In the demo program =semdemo.c=, what's locked?
      3. Draw a flow chart to show how the demo program works.

*** CANCELLED Unix Sockets               :noexport:CANCELLED:
    CLOSED: [2010-09-06 Mon 23:38]
    :LOGBOOK:
    - State "CANCELLED"  from "TODO"       [2010-09-06 Mon 23:39]
    :END:
**** Reference
     - /Beej's Guide to Unix IPC/, [[http://beej.us/guide/bgipc/output/html/singlepage/bgipc.html#unixsock][section 11]] ([[http://cs2.swfu.edu.cn/pub/resources/Books/OS/webcourses/beej.us/guide/bgipc/output/html/singlepage/bgipc.html#unixsock][cs2 mirror]])
*** Sum up
    In your email message, please answer the following questions.
     1. How many hours you spent in this section?
     2. What's the major difficulties you met in this section? And,
     3. How did you solve (or try solving) them?
     4. Have you learnt anything? Or your time was just wasted?

* Memory management
  - *Reference*
    [[https://www.informit.com/articles/article.aspx?p=173438][User-Level Memory Management in Linux Programming]], 2004. (last visited: [2020-11-20 Fri])
** Basic commands
   1. top
      : top
      With the help of =man top=, get a clear idea about:
      - VIRT :: Virtual Image (kb)

        The total amount of virtual memory used by the task. It includes all
        code, data and shared libraries plus pages that have been swapped out.

        VIRT = SWAP + RES

      - SWAP :: Swapped size (kb)

        The swapped out portion of a task's total virtual memory image.

      - RES :: Resident size (kb). (=ps -aly=).

           The non-swapped physical memory a task has used.

           RES = CODE + DATA

      - CODE :: Code size (kb)

        The amount of physical memory devoted to executable code, also
        known as the 'text resident set' size or TRS.

      - DATA :: Data+Stack size (kb)

        The amount of physical memory devoted to other than executable
        code, also known as the 'data resident set' size or DRS.

      - SHR :: Shared Mem size (kb)

           The amount of shared memory used by a task. It simply reflects
           memory that could be potentially shared with other processes.

      - nFLT :: Page Fault count

        The number of major page faults that have occurred for a task.  A page fault occurs
        when a process attempts to read from or write to a virtual page that is not
        currently present in its address space.  A major page fault is when backing storage
        access (such as a disk) is involved in making that page available.

      - nDRT :: Dirty Pages count

        The number of pages that have been modified since they were last written to disk.
        Dirty pages must be written to disk before the corresponding physical memory
        location can be used for some other virtual page.

   2. =size=, =objdump=, =nm=

      Compile [[./src/mem/size.c][this c program]] with
      : gcc -Wall size.c
      Then, use =size= to see the size of its /text/, /data/, and /bss/ segments.
      : size a.out
      The output should be something like
      : text   data   bss        dec         hex    filename
      : 1200   520    1024032    1025752     fa6d8      a.out
      If you exam its size with =ls -l=, you should get something similar to the following
      line
      : -rwxr-xr-x   1 wx672          wx672        6627 Oct 18 18:05 a.out
      Tell me:
      1. What does the =6627= mean?
      2. What do the =1200=, =520=, =1024032=, and =1025752= mean?
** Shared Memory Segments
   - *Reference* 
     - /Beej's Guide to Unix IPC/, [[http://beej.us/guide/bgipc/html/multi/shm.html][section 9]].
     - =man shmget=
     - =man shmat=
     - =man shmdt=
     - =man shmctl=
     - =man ipcrm=
     - =man ipcs=
   - *Your tasks*
     1. Follow /Beej's Guide to Unix IPC/, [[http://beej.us/guide/bgipc/html/multi/shm.html][section 9]] step by step to learn how to use shared memory segments.
     2. Use =ipcrm= to remove the segment you just created while running the example code.
     3. Add semaphore mechanism into the sample program (=shmdemo.c=) to enforce mutual-exclusive
        access to the shared data area.

** Memory Mapped Files
   - *Reference* 
     - /Beej's Guide to Unix IPC/, [[http://beej.us/guide/bgipc/html/multi/mmap.html][section 10]].
     - =man fseek=
     - =man mmap=, =man munmap=
     - =man getpagesize=
     - =man stat=
   - *Your tasks*
     1. Follow /Beej's Guide to Unix IPC/, [[http://beej.us/guide/bgipc/html/multi/mmap.html][section 10]] step by step to learn how to use memory mapped files.
     2. Write a small program to find out the page size of your Linux PC.
     3. Add semaphore mechanism into the sample program (=mmapdemo.c=) to enforce mutual-exclusive
        access to the shared data area.
** Sum up
   In your email message, please answer the following questions.
     1. How many hours you spent in this section?
     2. What's the major difficulties you met in this section? And,
     3. How did you solve (or try solving) them?
     4. Have you learnt anything? Or your time was just wasted?
    
* File System 
  - *Reference*
    - [[https://cs6.swfu.edu.cn/~wx672/lecture_notes/os/ext2-analysis.html][Ext2 file system analysis]] (last visited: [2020-11-20 Fri])
    - [[http://www.nongnu.org/ext2-doc/ext2.html][Ext2 documentation]] (last visited: [2020-11-20 Fri])
    - [[https://developer.ibm.com/technologies/systems/tutorials/l-linux-filesystem/][Anatomy of the Linux file system]] (last visited: [2020-11-20 Fri])
    - [[http://www.haifux.org/lectures/119/linux-2.4-vfs/index.html][The VFS (Virtual File System) in Linux Kernel V2.4 --- A Play In 5 Acts]] (last visited: [2020-11-20 Fri])
** File system creation
   1. Create a initialized file
      : dd if=/dev/zero of=fs.img bs=1k count=10000
      You now have a file called =fs.img= that's 10MB.
   2. Use the =losetup= command to associate a loop device with the file (making it look
      like a block device instead of just a regular file within the file system):
      : sudo losetup /dev/loop0 fs.img
   3. Creating an ext2 file system within the loop device
      : sudo mke2fs /dev/loop0 
   4. Mount the newly created file system onto =/mnt= directory
      : sudo mount -t ext2 /dev/loop0 /mnt
      or
      : sudo mount -o loop fs.img /mnt
   5. Get information about your new file system   
      : dumpe2fs /dev/loop0
*** Your tasks
    1. By following the above 5 steps, you've got a new file system mounted on =/mnt=
       directory. Now you can get into =/mnt=, and create a new file in it. And then
       associate it with a loop device (=/dev/loop1=), and create another file system in
       it.
    2. Plug your USB disk into your PC's USB port, and check 
       1. what file system it is?
       2. which directory it's mounted on?
       3. Use =fsck= to get some details about your USB disk.
** Finding a file with =hexdump=
   Follow the instructions in
   [[https://cs6.swfu.edu.cn/~wx672/lecture_notes/os/ext2-analysis.html#sec-3]] (last visited: [2020-11-20 Fri])
   to learn how to find a file with =hexdump= in your newly created file system.
   And then answer this question:
   - After you do '=cat hello=' at the command line, you will see on the screen the
     content of file =hello=, in our case it is '=helloworld='.
     
     Now give me a detailed picture about what is happened in the OS from '=cat hello=' to
     '=helloworld=' is shown on the screen.
** Sum up
   In your email message, please answer the following questions.
     1. How many hours you spent in this section?
     2. What's the major difficulties you met in this section? And,
     3. How did you solve (or try solving) them?
     4. Have you learnt anything? Or your time was just wasted?
